Adding a database

- Again, continue working on the last project we used to practice dependency injection.
- Add the NuGet package "Microsoft.EntityFrameworkCore.Sqlite". Make sure you match the major version with the .NET version used.
- Add the NuGet package "Microsoft.EntityFrameworkCore.Design".
- From the lab project on Entity Framework, copy the "Database" and "Migrations" folder over to the project. 
- Make sure all classes in the folders are public. 
- In program.cs, add the DbContext to the dependency injection container: 
builder.Services.AddDbContext<PersonDbContext>();
- Should you already have a Person class, repository and interface in the project, please delete them to avoid confusion.
- Create a new repository class for Persons. Give it a constructor that accepts a PersonDbContext and put the instance in a field:

        private readonly PersonDbContext _Context;

        public PersonRepository(PersonDbContext context)
        {
            _Context = context;
        }

- Give it a method that returns all Persons from the DbContext:

        public IEnumerable<Person> GetPersons()
        {
            return _Context.Persons;
        }

- Create an interface for the new repository class and register it in the DI container in program.cs.
- Add an endpoint or adjust an existing one. It should return all persons from the repository.
- To create the database, open a Terminal (you can do that in Visual Studio, it's under the "view" menu item).
- CD to the project folder and type: dotnet ef database update

- Run the program and access the endpoint. If everything is OK you should see an empty list. That is because there are no persons in the database yet.
- To cope with that, let's add some seed data:
- In PersonDbContext, add this code:

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<Person>().HasData(
                new Person { Id= 1, Name = "Alice", City = "New York" },
                new Person { Id = 2, Name = "John", City = "London" }
            );
        }

- Now add a migration by typing "dotnet ef migrations add PersonSeedData".
- The migrations should appear in the migrations folder. Examine it.
- Update the database again with the new migration: dotnet ef database update
- Run again and the persons should be returned when you try the endpoint again.

- We are now sending entity framework entities over the wire and that is considered bad design. The sole purpose of entities is to access a database.
- Create a class "PersonDto" where Dto stands for "data transfer object".
- Instead of exposing the entity, expose PersonDto instead. Make all necessary arrangements to make this happen including logic to convert the entity to the DTO.